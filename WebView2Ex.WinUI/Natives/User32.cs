// Native methods wrapper
// Some code are from https://github.com/microsoft/microsoft-ui-xaml/blob/main/dev/WebView2/WebView2.cpp
#nullable enable
using System;
using System.Runtime.InteropServices;
using Windows.Win32;
using Windows.Win32.Foundation;
using SysPoint = System.Drawing.Point;
using Windows.Win32.UI.WindowsAndMessaging;
using System.Runtime.CompilerServices;

namespace WebView2Ex.Natives;

static class User32
{
    public static bool ClientToScreen(HWND hWnd, ref SysPoint lpPoint)
        => PInvoke.ClientToScreen(hWnd, ref lpPoint);
    
    public static LRESULT SendMessage(HWND hWnd, uint Msg, WPARAM wParam, LPARAM lParam)
        => PInvoke.SendMessage(hWnd, Msg, wParam, lParam);
    
    
    public static unsafe HWND CreateWindowEx(
        WINDOW_EX_STYLE dwExStyle,
        string lpClassName,
        string lpWindowName,
        WINDOW_STYLE dwStyle,
        int x,
        int y,
        int nWidth,
        int nHeight,
        HWND hWndParent,
        SafeHandle? hMenu,
        SafeHandle? hInstance,
        void* lpParam
    ) => PInvoke.CreateWindowEx(dwExStyle, lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);
    
    public static LRESULT DefWindowProc(HWND hWnd, uint Msg, WPARAM wParam, LPARAM lParam)
        => PInvoke.DefWindowProc(hWnd, Msg, wParam, lParam);
    
    public static HWND GetFocus() => PInvoke.GetFocus();

    public static ushort RegisterClass(in WNDCLASSW lpWndClass)
        => PInvoke.RegisterClass(in lpWndClass);

    public static BOOL DestroyWindow(HWND hWnd)
        => PInvoke.DestroyWindow(hWnd);

    public static bool IsShiftDown => WinWrapper.Input.Keyboard.IsShiftDown;
    public static bool IsControlDown => WinWrapper.Input.Keyboard.IsControlDown;
}
class UnsafeSafeHandle : SafeHandle
{
    public UnsafeSafeHandle(IntPtr invalidHandleValue, bool ownsHandle) : base(invalidHandleValue, ownsHandle)
    {

    }

    public override bool IsInvalid => false;

    protected override bool ReleaseHandle() => true;
}
// Autogenerated that fails
[Flags]
[global::System.CodeDom.Compiler.GeneratedCode("Microsoft.Windows.CsWin32", "0.2.104-beta+6d86f35b75")]
internal enum MOUSEHOOKSTRUCTEX_MOUSE_DATA : uint
{
    XBUTTON1 = 0x00000001,
    XBUTTON2 = 0x00000002,
}